1 primero npm init

crea un json package.json /// investigar mas el tema de licencias, en la ctualidad puse MIT y ficheros
el fichero mensionado para la creacion fue server.js

2 intalamos el express /// la cual es una dependencia y actualiza el json

npm i express
si quieres instalar una version especifica utiliza
npm i express@NUMERO DE version
npm i espress@4.19.2

3 crear el fichero // en la raiz 
server.js

4 como se utilizaran la version de dma scrip se debe ir al json y agregar la propiedad de modulo.
esto se hace agregando una linea sobre la que dice 'main' la linea agregar es
"type": "module"
permite utilizar el sistema de import, export//// en lugar de edma requait

5 iniciamos la configuracion importando librerias
server.js 

6 arrancamos el server con el comando
///// 6a) modificamos el json en la seccion scrips agregamos *** es la creacion de un atajo segun entiendo
"dev": "node server.js",
npm run dev

7 crear control de variables de entorno
crear fichero .env /// para la lectura del archivo es necesario el uso de una biblioteca llamada dotenv /// tambien agregarlo al scripts
para ello ir a la terminar e intalarla recomandacion en modo desarrollo
npm i -D dotenv
como se utiliza importandola en el archivo server.js
correr probar

8 agregar un middle ware 
//dentro de ello instalr morgan
npm i -D morgan

9 instalar un conector de base de datos
npm install mongoose

10 Crear los modelos 
Crear la carpeta y los archivos de los modelos

11 recomendacion de una libreria que crear id para evitar ataques
npm i uuid

11a recomendacion 2 como estamos creando el modulo de usuarios instalar un paquete de encryptacion de password
npm install bcrypt

12 creacion de la carpeta middlewares

13 agregar biblioteca para la creacion de token
npm install jsonwebtoken /// comprobar en el json que se instalo la biblioteca

14 creacion de rutas 
la creacion de la carpeta routs y crear para este ejemplo todas las rutas de los usuarios

14a /// resumen de la creacion de rutas

import express from 'express'; // frawor de usuario
import mongoose from 'mongoose';
import User from '../models/Ticket.js'

const router = express.Router(); /// crear un nuevo router

//para traer todos los tikets
router.get('/', async (req, res) => {});

//crear una nueva ruta
router.post('/', async (req, res) => {});

// para traer con un parametro un tiquet
router.get('/:id', async (req, res) => {});

// para actualizar el ticket con parametro
router.put('/:id', async (req, res) => {});

//para borrar 
router.delete('/:id', async (req, res) => {});

export default router;

importar desde la app y agregar el uso de la ruta |import userRoutes from './routs/ticketRoutes.js'; |
/// app.use("/api/tickets", ticketsRoutes)

14b para configurar la informacion de todos los tiquet
inicia con un try catch




15 tema test
npm install -D jest supertest babel-jest @babel/core @babel/preset-env joi

crear los archivos 
.babel
jest.config.js
crear la carpeta test

